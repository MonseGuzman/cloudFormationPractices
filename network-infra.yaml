Parameters:
  PublicInstance:
    Description: Select if you want public instance
    Type: String
    AllowedValues: ["Yes", "No"]
    Default: "Yes"  

Conditions:
  CreateInternetGateway: !Equals [ !Ref PublicInstance, "Yes" ]
    
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: '10.123.0.0/16'
      Tags: 
        - Key: Name
          Value: !Sub 'MonseG-${AWS::StackName}'
  
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.123.1.0/24'
      MapPublicIpOnLaunch: !If [CreateInternetGateway, true, false]
      VpcId: !Ref MyVPC
      Tags: 
        - Key: Name
          Value: !Sub 'MonseG-${AWS::StackName}'

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC
      Tags: 
        - Key: Name
          Value: !Sub 'MonseG-${AWS::StackName}'

  Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref MyRouteTable
      SubnetId: !Ref MySubnet

  MyRoute:
    Type: AWS::EC2::Route
    Condition: CreateInternetGateway
    Properties: 
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref MyRouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateInternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub 'MonseG-${AWS::StackName}'

Outputs:
  VPCId:
    Description: 'VPC attributes'
    Value: !Ref MyVPC
  SubnetId:
    Description: 'Subnet attributes'
    Value: !Ref MySubnet
