Parameters:
  InstanceType:
    Description: Select type of the instance
    Type: String
  InstanceOS:
    Description: OS to the instance
    Type: String
    AllowedValues: ["Linux", "Ubuntu"]
    Default: "Ubuntu"
    ConstraintDescription: Must be Linux or Ubuntu
  TemplateURL:
    Description: URL of the stack template
    Type: String

Mappings:
  AWSRegionAMI:
    ca-central-1:
      Linux: ami-042f39687f93b4afb
      Ubuntu: ami-00b6fcfc5204b62ed
    us-west-2: 
      Linux: ami-0ccea833bf267252a
      Ubuntu: ami-038937b3d6616035f
    us-east-2: 
      Linux: ami-01103fb68b3569475
      Ubuntu: ami-0430580de6244e02e
    us-east-1:
      Linux: ami-03a6eaae9938c858c
      Ubuntu: ami-053b0d53c279acc90

Rules:
  InstanceTypeAllow:
    RuleCondition: !Equals
      - !Ref 'AWS::Region'
      - 'us-east-1'
    Assertions:
      - Assert:
          'Fn::Contains':
            - ["t2.nano", "t2.micro", "t2.small"]
            - !Ref InstanceType
        AssertDescription: 'For this region, the instance type must choose between "t2.micro", "t2.nano" or "t2.small" at least'

Resources:
  # NESTED STACKS
  NetworkingResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref TemplateURL
      TimeoutInMinutes: 10
      Parameters:
        PublicInstance: 'Yes'

  SSHKey:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyFormat: ppk
      KeyName: 'monsegKey'
      KeyType: rsa
      Tags: 
        - Key: Name
          Value: !Sub 'MonseG-${AWS::StackName}'
  
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections from specified CIDR ranges
      VpcId: !GetAtt NetworkingResources.Outputs.VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0 # myip

  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref 'AWS::Region', !Ref InstanceOS]
      InstanceType: !Ref InstanceType
      SubnetId: !GetAtt NetworkingResources.Outputs.SubnetId
      KeyName: !Ref SSHKey
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y amazon-linux-extras
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd mariadb-server
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 2775 {} \;
          echo "<?php phpinfo(): ?>" > /var/www/html/phpinfo.php
      SecurityGroupIds:
      - !Ref ServerSecurityGroup
      Tags: 
        - Key: Name
          Value: !Sub 'MonseG-${AWS::StackName}'

  # MyEIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     InstanceId: !Ref MyInstance

Outputs:
  PublicIP:
    Description: Id of the instance
    Value: !GetAtt MyInstance.PublicIp
    Export:
      Name: PublicIP # In case that you want to export to another stack
